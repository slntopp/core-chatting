syntax = "proto3";
package cc;

option go_package = "github.com/slntopp/core-chatting/cc";

message Empty {}

enum Role {
  NOACCESS = 0;
  USER = 1;
  OWNER = 2;
  ADMIN = 3;
}

message Chat {
  string uuid = 1;

  repeated string users = 2;
  repeated string admins = 3;
  string owner = 4;

  repeated string gateways = 5;

  Role role = 6;

  optional string topic = 7;
}
message Chats {
  repeated Chat chats = 1;
}

service ChatsAPI {
  rpc Create(Chat) returns (Chat);
  rpc Update(Chat) returns (Chat);

  rpc List(Empty) returns (Chats);

  rpc Delete(Chat) returns (Chat);
}

enum Kind {
  DEFAULT = 0;
  ADMIN_ONLY = 1;
}

message Attachment {
  string type = 1;
  bytes content = 2;
}

message Message {
  string uuid = 1;
  Kind kind = 2;

  string sender = 3;
  string content = 4;

  repeated Attachment attachments = 5;
  repeated string gateways = 6;

  optional string chat = 7; // Required for Send, Update and Delete requests
}
message Messages {
  repeated Message messages = 1;
}

service MessagesAPI {
  rpc Get(Chat) returns (Messages);

  rpc Send(Message) returns (Message);
  rpc Update(Message) returns (Message);

  rpc Delete(Message) returns (Message);
}

message User {
  string uuid = 1;
  string title = 2;
}

message Defaults {
  repeated string gateways = 1;
  repeated User admins = 2;
}

message Users {
  repeated User users = 1;
}

service UsersAPI {
  rpc FetchDefaults(Empty) returns (Defaults);

  // Resolves given Users data by their UUIDs
  // And returns all accessible Users for Requestor
  rpc Resolve(Users) returns (Users);
}
