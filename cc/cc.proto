syntax = "proto3";
package cc;

import "google/protobuf/struct.proto";

option go_package = "github.com/slntopp/core-chatting/cc";

message Empty {}

enum Role {
  NOACCESS = 0;
  USER = 1;
  OWNER = 2;
  ADMIN = 3;
}

message ChatMeta {
  int32 unread = 1;
  Message first_message = 2;
  Message last_message = 3;
  map<string, google.protobuf.Value> data = 4;
}

enum Status {
  NEW = 0;
  OPEN = 1;
  RESOLVE = 2;
  CLOSE = 3;
  ANSWERED = 4;
  CUSTOMER_REPLY = 5;
  WAITING_FOR_REPLY = 6;
  ON_HOLD = 7;
  IN_PROGRESS = 8;
}

message Chat {
  string uuid = 1;

  repeated string users = 2;
  repeated string admins = 3;
  string owner = 4;

  repeated string gateways = 5;

  Role role = 6;

  optional string topic = 7;
  optional ChatMeta meta = 8;

  int64 created = 9;

  Status status = 10;

  string department = 11;
  optional string responsible = 12;
  map<string, google.protobuf.Value> bot_state = 13;
}

message Chats {
  repeated Chat chats = 1;
}

message Merge {
  repeated string chats = 1;
}

message ListChatsRequest{
  optional uint64 page = 1;
  optional uint64 limit = 2;
  optional string field = 3; // Sort field
  optional string sort = 4;  // Sort direction
  map<string, google.protobuf.Value> filters = 5;
}

message SetBotStateRequest{
  string chat = 1;
  map<string, google.protobuf.Value> state = 2;
  optional bool disabled = 3;
  optional bool escalated = 4;
  optional bool skip_review = 5;
}

message ListChatsResponse{
  repeated Chat pool = 1;
  int64 total = 2;
}

message CountChatsRequest{
  map<string, google.protobuf.Value> filters = 1;
}
message CountChatsResponse{
  map<int32, int64> statuses = 1;
}

service ChatsAPI {
  rpc Create(Chat) returns (Chat);
  rpc Update(Chat) returns (Chat);

  rpc Get(Chat) returns (Chat);
  rpc List(ListChatsRequest) returns (ListChatsResponse);
  rpc Count(CountChatsRequest) returns (CountChatsResponse);

  rpc Delete(Chat) returns (Chat);

  rpc SetBotState(SetBotStateRequest) returns (Chat);
  rpc GetBotState(Chat) returns (Chat);

  rpc ChangeDepartment(Chat) returns (Chat);
  rpc ChangeGateway(Chat) returns (Chat);
  rpc ChangeStatus(Chat) returns (Chat);

  rpc MergeChats(Merge) returns (Chat);
  rpc SyncChats(Empty) returns (Empty);
}

enum Kind {
  DEFAULT = 0;
  ADMIN_ONLY = 1;
  FOR_BOT = 2;
}

message Attachment {
  string type = 1;
  bytes content = 2;
}

message Message {
  string uuid = 1;
  Kind kind = 2;

  string sender = 3;
  string content = 4;

  repeated string attachments = 5;
  repeated string gateways = 6;

  optional string chat = 7; // Required for Send, Update and Delete requests

  int64 sent = 8;
  int64 edited = 9;

  bool under_review = 10;
  repeated string readers = 11;
  map<string, google.protobuf.Value> meta = 12;

  repeated string mentioned = 13;
}
message Messages {
  repeated Message messages = 1;
}

service MessagesAPI {
  rpc Get(Chat) returns (Messages);

  rpc Send(Message) returns (Message);
  rpc Update(Message) returns (Message);

  rpc Delete(Message) returns (Message);
}

message User {
  string uuid = 1;
  string title = 2;
  google.protobuf.Struct data = 3;

  bool cc_is_bot = 4;
  string cc_username = 5;
  map<string, string> cc_commands = 6;
}

message Department {
  string key = 1;
  string title = 2;
  string description = 3;
  repeated string admins = 4;
  bool public = 5;
  optional string whmcs_id = 6;
}

message Option {
  string key = 1;
  float value = 2;
}

message Metric {
  string title = 1;
  repeated Option options = 2;
}

message Defaults {
  repeated string gateways = 1;
  repeated string admins = 2;
  repeated Department departments = 3;
  map<string, Metric> metrics = 4;
  map<string, string> templates = 5;
}

message Users {
  repeated User users = 1;
}

message FetchDefaultsRequest {
  bool fetch_templates = 1;
}

message GetMembersRequest{
  repeated string uuids = 1;
}

service UsersAPI {
  rpc Me(Empty) returns (User);
  rpc FetchDefaults(FetchDefaultsRequest) returns (Defaults);

  rpc GetConfig(Empty) returns (Defaults);
  rpc SetConfig(Defaults) returns (Defaults);

  // Resolves given Users data by their UUIDs
  // And returns all accessible Users for Requestor
  rpc Resolve(Users) returns (Users);
  rpc GetMembers(GetMembersRequest) returns (Users);
}

enum EventType {
  PING = 0;
  CHAT_CREATED = 1;
  CHAT_UPDATED = 2;
  CHAT_DELETED = 3;
  CHAT_READ = 4;
  MESSAGE_SENT = 5;
  MESSAGE_UPDATED = 6;
  MESSAGE_DELETED = 7;
  CHAT_DEPARTMENT_CHANGED = 8;
  CHAT_STATUS_CHANGED = 9;
  CHATS_MERGED = 10;
}

message Event {
  EventType type = 1;
  oneof item {
    Chat chat = 2;
    Message msg = 3;
  }
}

message StreamRequest {
  map<string, string> commands = 1;
}

service StreamService {
  rpc Stream(StreamRequest) returns (stream Event);
}
