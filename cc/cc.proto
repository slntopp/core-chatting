syntax = "proto3";
package cc;

import "google/protobuf/struct.proto";

option go_package = "github.com/slntopp/core-chatting/cc";

message Empty {}

enum Role {
  NOACCESS = 0;
  USER = 1;
  OWNER = 2;
  ADMIN = 3;
}

message ChatMeta {
  int32 unread = 1;
  Message first_message = 2;
  Message last_message = 3;
  map<string, google.protobuf.Value> data = 4;
}

enum Status {
  NEW = 0;
  OPEN = 1;
  RESOLVE = 2;
  CLOSE = 3;
}

message Chat {
  string uuid = 1;

  repeated string users = 2;
  repeated string admins = 3;
  string owner = 4;

  repeated string gateways = 5;

  Role role = 6;

  optional string topic = 7;
  optional ChatMeta meta = 8;

  int64 created = 9;

  Status status = 10;

  string department = 11;
}

message Chats { repeated Chat chats = 1; }

service ChatsAPI {
  rpc Create(Chat) returns (Chat);
  rpc Update(Chat) returns (Chat);

  rpc Get(Chat) returns (Chat);
  rpc List(Empty) returns (Chats);

  rpc Delete(Chat) returns (Chat);
}

enum Kind {
  DEFAULT = 0;
  ADMIN_ONLY = 1;
}

message Attachment {
  string type = 1;
  bytes content = 2;
}

message Message {
  string uuid = 1;
  Kind kind = 2;

  string sender = 3;
  string content = 4;

  repeated Attachment attachments = 5;
  repeated string gateways = 6;

  optional string chat = 7; // Required for Send, Update and Delete requests

  int64 sent = 8;
  int64 edited = 9;

  bool under_review = 10;
  repeated string readers = 11;
  map<string, google.protobuf.Value> meta = 12;
}
message Messages { repeated Message messages = 1; }

service MessagesAPI {
  rpc Get(Chat) returns (Messages);

  rpc Send(Message) returns (Message);
  rpc Update(Message) returns (Message);

  rpc Delete(Message) returns (Message);
}

message User {
  string uuid = 1;
  string title = 2;
  google.protobuf.Struct data = 3;
}

message Department {
  string key = 1;
  string title = 2;
  string description = 3;
  repeated string admins = 4;
}

message Option{
  string key = 1;
  google.protobuf.Value value = 2;
}

message Metric{
  string title = 1;
  repeated Option options = 2;
}

message Defaults {
  repeated string gateways = 1;
  repeated string admins = 2;
  repeated Department departments = 3;
  map<string, Metric> metrics = 4;
}

message Users { repeated User users = 1; }

service UsersAPI {
  rpc Me(Empty) returns (User);
  rpc FetchDefaults(Empty) returns (Defaults);

  // Resolves given Users data by their UUIDs
  // And returns all accessible Users for Requestor
  rpc Resolve(Users) returns (Users);
  rpc GetMembers(Empty) returns (Users);
}

enum EventType {
  PING = 0;
  CHAT_CREATED = 1;
  CHAT_UPDATED = 2;
  CHAT_DELETED = 3;
  CHAT_READ = 4;
  MESSAGE_SENT = 5;
  MESSAGE_UPDATED = 6;
  MESSAGE_DELETED = 7;
}

message Event {
  EventType type = 1;
  oneof item {
    Chat chat = 2;
    Message msg = 3;
  }
}

service StreamService { rpc Stream (Empty) returns (stream Event); }