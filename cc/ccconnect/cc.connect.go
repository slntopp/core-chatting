// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cc/cc.proto

package ccconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cc "github.com/slntopp/core-chatting/cc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatsAPIName is the fully-qualified name of the ChatsAPI service.
	ChatsAPIName = "cc.ChatsAPI"
	// MessagesAPIName is the fully-qualified name of the MessagesAPI service.
	MessagesAPIName = "cc.MessagesAPI"
	// UsersAPIName is the fully-qualified name of the UsersAPI service.
	UsersAPIName = "cc.UsersAPI"
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "cc.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatsAPICreateProcedure is the fully-qualified name of the ChatsAPI's Create RPC.
	ChatsAPICreateProcedure = "/cc.ChatsAPI/Create"
	// ChatsAPIUpdateProcedure is the fully-qualified name of the ChatsAPI's Update RPC.
	ChatsAPIUpdateProcedure = "/cc.ChatsAPI/Update"
	// ChatsAPIGetProcedure is the fully-qualified name of the ChatsAPI's Get RPC.
	ChatsAPIGetProcedure = "/cc.ChatsAPI/Get"
	// ChatsAPIListProcedure is the fully-qualified name of the ChatsAPI's List RPC.
	ChatsAPIListProcedure = "/cc.ChatsAPI/List"
	// ChatsAPIDeleteProcedure is the fully-qualified name of the ChatsAPI's Delete RPC.
	ChatsAPIDeleteProcedure = "/cc.ChatsAPI/Delete"
	// ChatsAPISetBotStateProcedure is the fully-qualified name of the ChatsAPI's SetBotState RPC.
	ChatsAPISetBotStateProcedure = "/cc.ChatsAPI/SetBotState"
	// ChatsAPIGetBotStateProcedure is the fully-qualified name of the ChatsAPI's GetBotState RPC.
	ChatsAPIGetBotStateProcedure = "/cc.ChatsAPI/GetBotState"
	// ChatsAPIChangeDepartmentProcedure is the fully-qualified name of the ChatsAPI's ChangeDepartment
	// RPC.
	ChatsAPIChangeDepartmentProcedure = "/cc.ChatsAPI/ChangeDepartment"
	// ChatsAPIChangeGatewayProcedure is the fully-qualified name of the ChatsAPI's ChangeGateway RPC.
	ChatsAPIChangeGatewayProcedure = "/cc.ChatsAPI/ChangeGateway"
	// MessagesAPIGetProcedure is the fully-qualified name of the MessagesAPI's Get RPC.
	MessagesAPIGetProcedure = "/cc.MessagesAPI/Get"
	// MessagesAPISendProcedure is the fully-qualified name of the MessagesAPI's Send RPC.
	MessagesAPISendProcedure = "/cc.MessagesAPI/Send"
	// MessagesAPIUpdateProcedure is the fully-qualified name of the MessagesAPI's Update RPC.
	MessagesAPIUpdateProcedure = "/cc.MessagesAPI/Update"
	// MessagesAPIDeleteProcedure is the fully-qualified name of the MessagesAPI's Delete RPC.
	MessagesAPIDeleteProcedure = "/cc.MessagesAPI/Delete"
	// UsersAPIMeProcedure is the fully-qualified name of the UsersAPI's Me RPC.
	UsersAPIMeProcedure = "/cc.UsersAPI/Me"
	// UsersAPIFetchDefaultsProcedure is the fully-qualified name of the UsersAPI's FetchDefaults RPC.
	UsersAPIFetchDefaultsProcedure = "/cc.UsersAPI/FetchDefaults"
	// UsersAPIGetConfigProcedure is the fully-qualified name of the UsersAPI's GetConfig RPC.
	UsersAPIGetConfigProcedure = "/cc.UsersAPI/GetConfig"
	// UsersAPISetConfigProcedure is the fully-qualified name of the UsersAPI's SetConfig RPC.
	UsersAPISetConfigProcedure = "/cc.UsersAPI/SetConfig"
	// UsersAPIResolveProcedure is the fully-qualified name of the UsersAPI's Resolve RPC.
	UsersAPIResolveProcedure = "/cc.UsersAPI/Resolve"
	// UsersAPIGetMembersProcedure is the fully-qualified name of the UsersAPI's GetMembers RPC.
	UsersAPIGetMembersProcedure = "/cc.UsersAPI/GetMembers"
	// StreamServiceStreamProcedure is the fully-qualified name of the StreamService's Stream RPC.
	StreamServiceStreamProcedure = "/cc.StreamService/Stream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatsAPIServiceDescriptor                = cc.File_cc_cc_proto.Services().ByName("ChatsAPI")
	chatsAPICreateMethodDescriptor           = chatsAPIServiceDescriptor.Methods().ByName("Create")
	chatsAPIUpdateMethodDescriptor           = chatsAPIServiceDescriptor.Methods().ByName("Update")
	chatsAPIGetMethodDescriptor              = chatsAPIServiceDescriptor.Methods().ByName("Get")
	chatsAPIListMethodDescriptor             = chatsAPIServiceDescriptor.Methods().ByName("List")
	chatsAPIDeleteMethodDescriptor           = chatsAPIServiceDescriptor.Methods().ByName("Delete")
	chatsAPISetBotStateMethodDescriptor      = chatsAPIServiceDescriptor.Methods().ByName("SetBotState")
	chatsAPIGetBotStateMethodDescriptor      = chatsAPIServiceDescriptor.Methods().ByName("GetBotState")
	chatsAPIChangeDepartmentMethodDescriptor = chatsAPIServiceDescriptor.Methods().ByName("ChangeDepartment")
	chatsAPIChangeGatewayMethodDescriptor    = chatsAPIServiceDescriptor.Methods().ByName("ChangeGateway")
	messagesAPIServiceDescriptor             = cc.File_cc_cc_proto.Services().ByName("MessagesAPI")
	messagesAPIGetMethodDescriptor           = messagesAPIServiceDescriptor.Methods().ByName("Get")
	messagesAPISendMethodDescriptor          = messagesAPIServiceDescriptor.Methods().ByName("Send")
	messagesAPIUpdateMethodDescriptor        = messagesAPIServiceDescriptor.Methods().ByName("Update")
	messagesAPIDeleteMethodDescriptor        = messagesAPIServiceDescriptor.Methods().ByName("Delete")
	usersAPIServiceDescriptor                = cc.File_cc_cc_proto.Services().ByName("UsersAPI")
	usersAPIMeMethodDescriptor               = usersAPIServiceDescriptor.Methods().ByName("Me")
	usersAPIFetchDefaultsMethodDescriptor    = usersAPIServiceDescriptor.Methods().ByName("FetchDefaults")
	usersAPIGetConfigMethodDescriptor        = usersAPIServiceDescriptor.Methods().ByName("GetConfig")
	usersAPISetConfigMethodDescriptor        = usersAPIServiceDescriptor.Methods().ByName("SetConfig")
	usersAPIResolveMethodDescriptor          = usersAPIServiceDescriptor.Methods().ByName("Resolve")
	usersAPIGetMembersMethodDescriptor       = usersAPIServiceDescriptor.Methods().ByName("GetMembers")
	streamServiceServiceDescriptor           = cc.File_cc_cc_proto.Services().ByName("StreamService")
	streamServiceStreamMethodDescriptor      = streamServiceServiceDescriptor.Methods().ByName("Stream")
)

// ChatsAPIClient is a client for the cc.ChatsAPI service.
type ChatsAPIClient interface {
	Create(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Update(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	List(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Chats], error)
	Delete(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	SetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	GetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	ChangeDepartment(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	ChangeGateway(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
}

// NewChatsAPIClient constructs a client for the cc.ChatsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatsAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatsAPIClient{
		create: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPICreateProcedure,
			connect.WithSchema(chatsAPICreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIUpdateProcedure,
			connect.WithSchema(chatsAPIUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIGetProcedure,
			connect.WithSchema(chatsAPIGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[cc.Empty, cc.Chats](
			httpClient,
			baseURL+ChatsAPIListProcedure,
			connect.WithSchema(chatsAPIListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIDeleteProcedure,
			connect.WithSchema(chatsAPIDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setBotState: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPISetBotStateProcedure,
			connect.WithSchema(chatsAPISetBotStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBotState: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIGetBotStateProcedure,
			connect.WithSchema(chatsAPIGetBotStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeDepartment: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIChangeDepartmentProcedure,
			connect.WithSchema(chatsAPIChangeDepartmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeGateway: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatsAPIChangeGatewayProcedure,
			connect.WithSchema(chatsAPIChangeGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatsAPIClient implements ChatsAPIClient.
type chatsAPIClient struct {
	create           *connect.Client[cc.Chat, cc.Chat]
	update           *connect.Client[cc.Chat, cc.Chat]
	get              *connect.Client[cc.Chat, cc.Chat]
	list             *connect.Client[cc.Empty, cc.Chats]
	delete           *connect.Client[cc.Chat, cc.Chat]
	setBotState      *connect.Client[cc.Chat, cc.Chat]
	getBotState      *connect.Client[cc.Chat, cc.Chat]
	changeDepartment *connect.Client[cc.Chat, cc.Chat]
	changeGateway    *connect.Client[cc.Chat, cc.Chat]
}

// Create calls cc.ChatsAPI.Create.
func (c *chatsAPIClient) Create(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls cc.ChatsAPI.Update.
func (c *chatsAPIClient) Update(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls cc.ChatsAPI.Get.
func (c *chatsAPIClient) Get(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls cc.ChatsAPI.List.
func (c *chatsAPIClient) List(ctx context.Context, req *connect.Request[cc.Empty]) (*connect.Response[cc.Chats], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls cc.ChatsAPI.Delete.
func (c *chatsAPIClient) Delete(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.delete.CallUnary(ctx, req)
}

// SetBotState calls cc.ChatsAPI.SetBotState.
func (c *chatsAPIClient) SetBotState(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.setBotState.CallUnary(ctx, req)
}

// GetBotState calls cc.ChatsAPI.GetBotState.
func (c *chatsAPIClient) GetBotState(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.getBotState.CallUnary(ctx, req)
}

// ChangeDepartment calls cc.ChatsAPI.ChangeDepartment.
func (c *chatsAPIClient) ChangeDepartment(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.changeDepartment.CallUnary(ctx, req)
}

// ChangeGateway calls cc.ChatsAPI.ChangeGateway.
func (c *chatsAPIClient) ChangeGateway(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.changeGateway.CallUnary(ctx, req)
}

// ChatsAPIHandler is an implementation of the cc.ChatsAPI service.
type ChatsAPIHandler interface {
	Create(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Update(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	List(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Chats], error)
	Delete(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	SetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	GetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	ChangeDepartment(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	ChangeGateway(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
}

// NewChatsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatsAPIHandler(svc ChatsAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatsAPICreateHandler := connect.NewUnaryHandler(
		ChatsAPICreateProcedure,
		svc.Create,
		connect.WithSchema(chatsAPICreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIUpdateHandler := connect.NewUnaryHandler(
		ChatsAPIUpdateProcedure,
		svc.Update,
		connect.WithSchema(chatsAPIUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIGetHandler := connect.NewUnaryHandler(
		ChatsAPIGetProcedure,
		svc.Get,
		connect.WithSchema(chatsAPIGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIListHandler := connect.NewUnaryHandler(
		ChatsAPIListProcedure,
		svc.List,
		connect.WithSchema(chatsAPIListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIDeleteHandler := connect.NewUnaryHandler(
		ChatsAPIDeleteProcedure,
		svc.Delete,
		connect.WithSchema(chatsAPIDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPISetBotStateHandler := connect.NewUnaryHandler(
		ChatsAPISetBotStateProcedure,
		svc.SetBotState,
		connect.WithSchema(chatsAPISetBotStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIGetBotStateHandler := connect.NewUnaryHandler(
		ChatsAPIGetBotStateProcedure,
		svc.GetBotState,
		connect.WithSchema(chatsAPIGetBotStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIChangeDepartmentHandler := connect.NewUnaryHandler(
		ChatsAPIChangeDepartmentProcedure,
		svc.ChangeDepartment,
		connect.WithSchema(chatsAPIChangeDepartmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatsAPIChangeGatewayHandler := connect.NewUnaryHandler(
		ChatsAPIChangeGatewayProcedure,
		svc.ChangeGateway,
		connect.WithSchema(chatsAPIChangeGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cc.ChatsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatsAPICreateProcedure:
			chatsAPICreateHandler.ServeHTTP(w, r)
		case ChatsAPIUpdateProcedure:
			chatsAPIUpdateHandler.ServeHTTP(w, r)
		case ChatsAPIGetProcedure:
			chatsAPIGetHandler.ServeHTTP(w, r)
		case ChatsAPIListProcedure:
			chatsAPIListHandler.ServeHTTP(w, r)
		case ChatsAPIDeleteProcedure:
			chatsAPIDeleteHandler.ServeHTTP(w, r)
		case ChatsAPISetBotStateProcedure:
			chatsAPISetBotStateHandler.ServeHTTP(w, r)
		case ChatsAPIGetBotStateProcedure:
			chatsAPIGetBotStateHandler.ServeHTTP(w, r)
		case ChatsAPIChangeDepartmentProcedure:
			chatsAPIChangeDepartmentHandler.ServeHTTP(w, r)
		case ChatsAPIChangeGatewayProcedure:
			chatsAPIChangeGatewayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedChatsAPIHandler struct{}

func (UnimplementedChatsAPIHandler) Create(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.Create is not implemented"))
}

func (UnimplementedChatsAPIHandler) Update(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.Update is not implemented"))
}

func (UnimplementedChatsAPIHandler) Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.Get is not implemented"))
}

func (UnimplementedChatsAPIHandler) List(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Chats], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.List is not implemented"))
}

func (UnimplementedChatsAPIHandler) Delete(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.Delete is not implemented"))
}

func (UnimplementedChatsAPIHandler) SetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.SetBotState is not implemented"))
}

func (UnimplementedChatsAPIHandler) GetBotState(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.GetBotState is not implemented"))
}

func (UnimplementedChatsAPIHandler) ChangeDepartment(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.ChangeDepartment is not implemented"))
}

func (UnimplementedChatsAPIHandler) ChangeGateway(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.ChatsAPI.ChangeGateway is not implemented"))
}

// MessagesAPIClient is a client for the cc.MessagesAPI service.
type MessagesAPIClient interface {
	Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Messages], error)
	Send(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
	Update(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
	Delete(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
}

// NewMessagesAPIClient constructs a client for the cc.MessagesAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessagesAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessagesAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messagesAPIClient{
		get: connect.NewClient[cc.Chat, cc.Messages](
			httpClient,
			baseURL+MessagesAPIGetProcedure,
			connect.WithSchema(messagesAPIGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		send: connect.NewClient[cc.Message, cc.Message](
			httpClient,
			baseURL+MessagesAPISendProcedure,
			connect.WithSchema(messagesAPISendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[cc.Message, cc.Message](
			httpClient,
			baseURL+MessagesAPIUpdateProcedure,
			connect.WithSchema(messagesAPIUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[cc.Message, cc.Message](
			httpClient,
			baseURL+MessagesAPIDeleteProcedure,
			connect.WithSchema(messagesAPIDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// messagesAPIClient implements MessagesAPIClient.
type messagesAPIClient struct {
	get    *connect.Client[cc.Chat, cc.Messages]
	send   *connect.Client[cc.Message, cc.Message]
	update *connect.Client[cc.Message, cc.Message]
	delete *connect.Client[cc.Message, cc.Message]
}

// Get calls cc.MessagesAPI.Get.
func (c *messagesAPIClient) Get(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Messages], error) {
	return c.get.CallUnary(ctx, req)
}

// Send calls cc.MessagesAPI.Send.
func (c *messagesAPIClient) Send(ctx context.Context, req *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return c.send.CallUnary(ctx, req)
}

// Update calls cc.MessagesAPI.Update.
func (c *messagesAPIClient) Update(ctx context.Context, req *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls cc.MessagesAPI.Delete.
func (c *messagesAPIClient) Delete(ctx context.Context, req *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return c.delete.CallUnary(ctx, req)
}

// MessagesAPIHandler is an implementation of the cc.MessagesAPI service.
type MessagesAPIHandler interface {
	Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Messages], error)
	Send(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
	Update(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
	Delete(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error)
}

// NewMessagesAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessagesAPIHandler(svc MessagesAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messagesAPIGetHandler := connect.NewUnaryHandler(
		MessagesAPIGetProcedure,
		svc.Get,
		connect.WithSchema(messagesAPIGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	messagesAPISendHandler := connect.NewUnaryHandler(
		MessagesAPISendProcedure,
		svc.Send,
		connect.WithSchema(messagesAPISendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	messagesAPIUpdateHandler := connect.NewUnaryHandler(
		MessagesAPIUpdateProcedure,
		svc.Update,
		connect.WithSchema(messagesAPIUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	messagesAPIDeleteHandler := connect.NewUnaryHandler(
		MessagesAPIDeleteProcedure,
		svc.Delete,
		connect.WithSchema(messagesAPIDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cc.MessagesAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessagesAPIGetProcedure:
			messagesAPIGetHandler.ServeHTTP(w, r)
		case MessagesAPISendProcedure:
			messagesAPISendHandler.ServeHTTP(w, r)
		case MessagesAPIUpdateProcedure:
			messagesAPIUpdateHandler.ServeHTTP(w, r)
		case MessagesAPIDeleteProcedure:
			messagesAPIDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessagesAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedMessagesAPIHandler struct{}

func (UnimplementedMessagesAPIHandler) Get(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Messages], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.MessagesAPI.Get is not implemented"))
}

func (UnimplementedMessagesAPIHandler) Send(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.MessagesAPI.Send is not implemented"))
}

func (UnimplementedMessagesAPIHandler) Update(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.MessagesAPI.Update is not implemented"))
}

func (UnimplementedMessagesAPIHandler) Delete(context.Context, *connect.Request[cc.Message]) (*connect.Response[cc.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.MessagesAPI.Delete is not implemented"))
}

// UsersAPIClient is a client for the cc.UsersAPI service.
type UsersAPIClient interface {
	Me(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.User], error)
	FetchDefaults(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error)
	GetConfig(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error)
	SetConfig(context.Context, *connect.Request[cc.Defaults]) (*connect.Response[cc.Defaults], error)
	// Resolves given Users data by their UUIDs
	// And returns all accessible Users for Requestor
	Resolve(context.Context, *connect.Request[cc.Users]) (*connect.Response[cc.Users], error)
	GetMembers(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Users], error)
}

// NewUsersAPIClient constructs a client for the cc.UsersAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersAPIClient{
		me: connect.NewClient[cc.Empty, cc.User](
			httpClient,
			baseURL+UsersAPIMeProcedure,
			connect.WithSchema(usersAPIMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchDefaults: connect.NewClient[cc.Empty, cc.Defaults](
			httpClient,
			baseURL+UsersAPIFetchDefaultsProcedure,
			connect.WithSchema(usersAPIFetchDefaultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[cc.Empty, cc.Defaults](
			httpClient,
			baseURL+UsersAPIGetConfigProcedure,
			connect.WithSchema(usersAPIGetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setConfig: connect.NewClient[cc.Defaults, cc.Defaults](
			httpClient,
			baseURL+UsersAPISetConfigProcedure,
			connect.WithSchema(usersAPISetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolve: connect.NewClient[cc.Users, cc.Users](
			httpClient,
			baseURL+UsersAPIResolveProcedure,
			connect.WithSchema(usersAPIResolveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMembers: connect.NewClient[cc.Empty, cc.Users](
			httpClient,
			baseURL+UsersAPIGetMembersProcedure,
			connect.WithSchema(usersAPIGetMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersAPIClient implements UsersAPIClient.
type usersAPIClient struct {
	me            *connect.Client[cc.Empty, cc.User]
	fetchDefaults *connect.Client[cc.Empty, cc.Defaults]
	getConfig     *connect.Client[cc.Empty, cc.Defaults]
	setConfig     *connect.Client[cc.Defaults, cc.Defaults]
	resolve       *connect.Client[cc.Users, cc.Users]
	getMembers    *connect.Client[cc.Empty, cc.Users]
}

// Me calls cc.UsersAPI.Me.
func (c *usersAPIClient) Me(ctx context.Context, req *connect.Request[cc.Empty]) (*connect.Response[cc.User], error) {
	return c.me.CallUnary(ctx, req)
}

// FetchDefaults calls cc.UsersAPI.FetchDefaults.
func (c *usersAPIClient) FetchDefaults(ctx context.Context, req *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error) {
	return c.fetchDefaults.CallUnary(ctx, req)
}

// GetConfig calls cc.UsersAPI.GetConfig.
func (c *usersAPIClient) GetConfig(ctx context.Context, req *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// SetConfig calls cc.UsersAPI.SetConfig.
func (c *usersAPIClient) SetConfig(ctx context.Context, req *connect.Request[cc.Defaults]) (*connect.Response[cc.Defaults], error) {
	return c.setConfig.CallUnary(ctx, req)
}

// Resolve calls cc.UsersAPI.Resolve.
func (c *usersAPIClient) Resolve(ctx context.Context, req *connect.Request[cc.Users]) (*connect.Response[cc.Users], error) {
	return c.resolve.CallUnary(ctx, req)
}

// GetMembers calls cc.UsersAPI.GetMembers.
func (c *usersAPIClient) GetMembers(ctx context.Context, req *connect.Request[cc.Empty]) (*connect.Response[cc.Users], error) {
	return c.getMembers.CallUnary(ctx, req)
}

// UsersAPIHandler is an implementation of the cc.UsersAPI service.
type UsersAPIHandler interface {
	Me(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.User], error)
	FetchDefaults(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error)
	GetConfig(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error)
	SetConfig(context.Context, *connect.Request[cc.Defaults]) (*connect.Response[cc.Defaults], error)
	// Resolves given Users data by their UUIDs
	// And returns all accessible Users for Requestor
	Resolve(context.Context, *connect.Request[cc.Users]) (*connect.Response[cc.Users], error)
	GetMembers(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Users], error)
}

// NewUsersAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersAPIHandler(svc UsersAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersAPIMeHandler := connect.NewUnaryHandler(
		UsersAPIMeProcedure,
		svc.Me,
		connect.WithSchema(usersAPIMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersAPIFetchDefaultsHandler := connect.NewUnaryHandler(
		UsersAPIFetchDefaultsProcedure,
		svc.FetchDefaults,
		connect.WithSchema(usersAPIFetchDefaultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersAPIGetConfigHandler := connect.NewUnaryHandler(
		UsersAPIGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(usersAPIGetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersAPISetConfigHandler := connect.NewUnaryHandler(
		UsersAPISetConfigProcedure,
		svc.SetConfig,
		connect.WithSchema(usersAPISetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersAPIResolveHandler := connect.NewUnaryHandler(
		UsersAPIResolveProcedure,
		svc.Resolve,
		connect.WithSchema(usersAPIResolveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersAPIGetMembersHandler := connect.NewUnaryHandler(
		UsersAPIGetMembersProcedure,
		svc.GetMembers,
		connect.WithSchema(usersAPIGetMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cc.UsersAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersAPIMeProcedure:
			usersAPIMeHandler.ServeHTTP(w, r)
		case UsersAPIFetchDefaultsProcedure:
			usersAPIFetchDefaultsHandler.ServeHTTP(w, r)
		case UsersAPIGetConfigProcedure:
			usersAPIGetConfigHandler.ServeHTTP(w, r)
		case UsersAPISetConfigProcedure:
			usersAPISetConfigHandler.ServeHTTP(w, r)
		case UsersAPIResolveProcedure:
			usersAPIResolveHandler.ServeHTTP(w, r)
		case UsersAPIGetMembersProcedure:
			usersAPIGetMembersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersAPIHandler struct{}

func (UnimplementedUsersAPIHandler) Me(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.Me is not implemented"))
}

func (UnimplementedUsersAPIHandler) FetchDefaults(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.FetchDefaults is not implemented"))
}

func (UnimplementedUsersAPIHandler) GetConfig(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Defaults], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.GetConfig is not implemented"))
}

func (UnimplementedUsersAPIHandler) SetConfig(context.Context, *connect.Request[cc.Defaults]) (*connect.Response[cc.Defaults], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.SetConfig is not implemented"))
}

func (UnimplementedUsersAPIHandler) Resolve(context.Context, *connect.Request[cc.Users]) (*connect.Response[cc.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.Resolve is not implemented"))
}

func (UnimplementedUsersAPIHandler) GetMembers(context.Context, *connect.Request[cc.Empty]) (*connect.Response[cc.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cc.UsersAPI.GetMembers is not implemented"))
}

// StreamServiceClient is a client for the cc.StreamService service.
type StreamServiceClient interface {
	Stream(context.Context, *connect.Request[cc.StreamRequest]) (*connect.ServerStreamForClient[cc.Event], error)
}

// NewStreamServiceClient constructs a client for the cc.StreamService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamServiceClient{
		stream: connect.NewClient[cc.StreamRequest, cc.Event](
			httpClient,
			baseURL+StreamServiceStreamProcedure,
			connect.WithSchema(streamServiceStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	stream *connect.Client[cc.StreamRequest, cc.Event]
}

// Stream calls cc.StreamService.Stream.
func (c *streamServiceClient) Stream(ctx context.Context, req *connect.Request[cc.StreamRequest]) (*connect.ServerStreamForClient[cc.Event], error) {
	return c.stream.CallServerStream(ctx, req)
}

// StreamServiceHandler is an implementation of the cc.StreamService service.
type StreamServiceHandler interface {
	Stream(context.Context, *connect.Request[cc.StreamRequest], *connect.ServerStream[cc.Event]) error
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamServiceStreamHandler := connect.NewServerStreamHandler(
		StreamServiceStreamProcedure,
		svc.Stream,
		connect.WithSchema(streamServiceStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cc.StreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamServiceStreamProcedure:
			streamServiceStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) Stream(context.Context, *connect.Request[cc.StreamRequest], *connect.ServerStream[cc.Event]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cc.StreamService.Stream is not implemented"))
}
