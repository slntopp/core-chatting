// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cc/cc.proto

package ccconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	cc "github.com/slntopp/core-chatting/cc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChatsAPIName is the fully-qualified name of the ChatsAPI service.
	ChatsAPIName = "cc.ChatsAPI"
	// MessagesAPIName is the fully-qualified name of the MessagesAPI service.
	MessagesAPIName = "cc.MessagesAPI"
)

// ChatsAPIClient is a client for the cc.ChatsAPI service.
type ChatsAPIClient interface {
	Create(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
	Update(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
	List(context.Context, *connect_go.Request[cc.Empty]) (*connect_go.Response[cc.Chats], error)
	Delete(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
}

// NewChatsAPIClient constructs a client for the cc.ChatsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatsAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChatsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatsAPIClient{
		create: connect_go.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+"/cc.ChatsAPI/Create",
			opts...,
		),
		update: connect_go.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+"/cc.ChatsAPI/Update",
			opts...,
		),
		list: connect_go.NewClient[cc.Empty, cc.Chats](
			httpClient,
			baseURL+"/cc.ChatsAPI/List",
			opts...,
		),
		delete: connect_go.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+"/cc.ChatsAPI/Delete",
			opts...,
		),
	}
}

// chatsAPIClient implements ChatsAPIClient.
type chatsAPIClient struct {
	create *connect_go.Client[cc.Chat, cc.Chat]
	update *connect_go.Client[cc.Chat, cc.Chat]
	list   *connect_go.Client[cc.Empty, cc.Chats]
	delete *connect_go.Client[cc.Chat, cc.Chat]
}

// Create calls cc.ChatsAPI.Create.
func (c *chatsAPIClient) Create(ctx context.Context, req *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls cc.ChatsAPI.Update.
func (c *chatsAPIClient) Update(ctx context.Context, req *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return c.update.CallUnary(ctx, req)
}

// List calls cc.ChatsAPI.List.
func (c *chatsAPIClient) List(ctx context.Context, req *connect_go.Request[cc.Empty]) (*connect_go.Response[cc.Chats], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls cc.ChatsAPI.Delete.
func (c *chatsAPIClient) Delete(ctx context.Context, req *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return c.delete.CallUnary(ctx, req)
}

// ChatsAPIHandler is an implementation of the cc.ChatsAPI service.
type ChatsAPIHandler interface {
	Create(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
	Update(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
	List(context.Context, *connect_go.Request[cc.Empty]) (*connect_go.Response[cc.Chats], error)
	Delete(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error)
}

// NewChatsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatsAPIHandler(svc ChatsAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/cc.ChatsAPI/Create", connect_go.NewUnaryHandler(
		"/cc.ChatsAPI/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/cc.ChatsAPI/Update", connect_go.NewUnaryHandler(
		"/cc.ChatsAPI/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/cc.ChatsAPI/List", connect_go.NewUnaryHandler(
		"/cc.ChatsAPI/List",
		svc.List,
		opts...,
	))
	mux.Handle("/cc.ChatsAPI/Delete", connect_go.NewUnaryHandler(
		"/cc.ChatsAPI/Delete",
		svc.Delete,
		opts...,
	))
	return "/cc.ChatsAPI/", mux
}

// UnimplementedChatsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedChatsAPIHandler struct{}

func (UnimplementedChatsAPIHandler) Create(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.ChatsAPI.Create is not implemented"))
}

func (UnimplementedChatsAPIHandler) Update(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.ChatsAPI.Update is not implemented"))
}

func (UnimplementedChatsAPIHandler) List(context.Context, *connect_go.Request[cc.Empty]) (*connect_go.Response[cc.Chats], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.ChatsAPI.List is not implemented"))
}

func (UnimplementedChatsAPIHandler) Delete(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Chat], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.ChatsAPI.Delete is not implemented"))
}

// MessagesAPIClient is a client for the cc.MessagesAPI service.
type MessagesAPIClient interface {
	Send(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error)
	Get(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Messages], error)
	Delete(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error)
}

// NewMessagesAPIClient constructs a client for the cc.MessagesAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessagesAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessagesAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messagesAPIClient{
		send: connect_go.NewClient[cc.Message, cc.Message](
			httpClient,
			baseURL+"/cc.MessagesAPI/Send",
			opts...,
		),
		get: connect_go.NewClient[cc.Chat, cc.Messages](
			httpClient,
			baseURL+"/cc.MessagesAPI/Get",
			opts...,
		),
		delete: connect_go.NewClient[cc.Message, cc.Message](
			httpClient,
			baseURL+"/cc.MessagesAPI/Delete",
			opts...,
		),
	}
}

// messagesAPIClient implements MessagesAPIClient.
type messagesAPIClient struct {
	send   *connect_go.Client[cc.Message, cc.Message]
	get    *connect_go.Client[cc.Chat, cc.Messages]
	delete *connect_go.Client[cc.Message, cc.Message]
}

// Send calls cc.MessagesAPI.Send.
func (c *messagesAPIClient) Send(ctx context.Context, req *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error) {
	return c.send.CallUnary(ctx, req)
}

// Get calls cc.MessagesAPI.Get.
func (c *messagesAPIClient) Get(ctx context.Context, req *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Messages], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls cc.MessagesAPI.Delete.
func (c *messagesAPIClient) Delete(ctx context.Context, req *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error) {
	return c.delete.CallUnary(ctx, req)
}

// MessagesAPIHandler is an implementation of the cc.MessagesAPI service.
type MessagesAPIHandler interface {
	Send(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error)
	Get(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Messages], error)
	Delete(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error)
}

// NewMessagesAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessagesAPIHandler(svc MessagesAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/cc.MessagesAPI/Send", connect_go.NewUnaryHandler(
		"/cc.MessagesAPI/Send",
		svc.Send,
		opts...,
	))
	mux.Handle("/cc.MessagesAPI/Get", connect_go.NewUnaryHandler(
		"/cc.MessagesAPI/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/cc.MessagesAPI/Delete", connect_go.NewUnaryHandler(
		"/cc.MessagesAPI/Delete",
		svc.Delete,
		opts...,
	))
	return "/cc.MessagesAPI/", mux
}

// UnimplementedMessagesAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedMessagesAPIHandler struct{}

func (UnimplementedMessagesAPIHandler) Send(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.MessagesAPI.Send is not implemented"))
}

func (UnimplementedMessagesAPIHandler) Get(context.Context, *connect_go.Request[cc.Chat]) (*connect_go.Response[cc.Messages], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.MessagesAPI.Get is not implemented"))
}

func (UnimplementedMessagesAPIHandler) Delete(context.Context, *connect_go.Request[cc.Message]) (*connect_go.Response[cc.Message], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cc.MessagesAPI.Delete is not implemented"))
}
